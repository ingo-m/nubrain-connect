name: "publish-pypi"

on:
  release:
    types: [created]
  push:
    branches:
      - main
    paths:
      # Trigger on changes to Pipfile.lock or the package itself.
      - "Pipfile.lock"
      - "app/**"

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          # This action has built-in caching for pipenv. It automatically uses
          # Pipfile.lock as the cache key.
          cache: "pipenv"

      - name: Install build tools
        run: pip install pipenv build twine

      - name: Install dependencies from Pipfile.lock
        # Using --dev ensures that build/twine are available if you managed them with
        # pipenv sync is faster than install as it assumes the lock file is up-to-date.
        run: pipenv sync --dev

      - name: Build package
        # The 'build' tool reads pyproject.toml and builds the package. It creates the
        # distribution files in a 'dist/' directory.
        run: python -m build ./app

      - name: Publish package to PyPI
        # Twine is the standard tool for securely uploading to PyPI.
        run: python -m twine upload --non-interactive dist/*
        env:
          # Use a PyPI API token for authentication
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
